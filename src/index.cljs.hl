(page "index.html"
 (:require [el.landing-page-vis.dom]
           [hoplon.svg :as svg]
           [thi.ng.ndarray.core :as nd]
           [cljsjs.pixi]
           [cljsjs.tween]
           [thi.ng.color.core :as col]))

(def bg "#102769")
(def fg "#ff8140")
; (def fg "#fff")
; http://easings.net/#easeOutBack
(def easing "cubic-bezier(0.175, 0.885, 0.32, 1.275)")

(def animation-speed 5000)

(def pareto-a (+ 0.1 (rand)))
(defn pareto
 ([xm] (pareto xm nil))
 ([xm a]
  (let [a (or a pareto-a)]
   (/ xm (.pow js/Math (rand) (/ 1 a))))))

(defn rand-size
 [n]
 (min n
      (pareto 1)))

(defn n
 [total per-item]
 (+ 2 (quot total per-item)))

(defn high-pass
 [v l]
 (if (<= v l)
     0
     v))

(defelem pixi
 [{:keys [height width spacing fg bg]} _]
 (let [pixi-colour (fn [c] @(col/as-int24 (col/css c)))
       bg (pixi-colour bg)
       fg (pixi-colour fg)
       renderer (js/PIXI.autoDetectRenderer. width height (clj->js {:transparent true
                                                                    :antialias true
                                                                    :resolution 1
                                                                    :clearBeforeRender true}))
       circle (doto (js/PIXI.Graphics.)
                    (.beginFill fg)
                    (.drawCircle (* width (rand))
                                 (* height (rand))
                                 5)
                    (.endFill))]

  (with-interval
   1000
   (-> circle .-x (set! (* width (rand) 0.5)))
   (-> circle .-y (set! (* height (rand) 0.5))))

  (letfn [(frame []
           (.render renderer circle)

           (.requestAnimationFrame js/window frame))]
   (.requestAnimationFrame js/window frame))
  (.-view renderer)))

(defelem vis
 [{:keys [height width spacing fg bg]} _]
 (let [n-rows (n width spacing)
       n-cols (n height spacing)
       gen-rand-array (fn []
                       (nd/ndarray
                        :int8
                        (repeatedly
                         (* n-rows n-cols)
                         #(rand-size spacing))
                        [n-rows n-cols]))
       rand-arr (cell (gen-rand-array))
       x-y-r (cell= (map (fn [[x y]]
                          [(* x spacing)
                           (* y spacing)
                           (/ (dec (nd/pick rand-arr x y))
                              2)])
                         (nd/position-seq rand-arr)))]

  (swap! rand-arr gen-rand-array)
  (with-interval animation-speed (swap! rand-arr gen-rand-array))

  (letfn [(circle [x y]
           (let [calc-r #(/ (dec (nd/pick @rand-arr @x @y))
                            2)
                 r (cell (calc-r))
                 delay-rand (* animation-speed (rand))
                 delay-total (+ animation-speed delay-rand)]

            (with-timeout delay-rand (swap! r calc-r))
            (with-interval
             delay-total
             (swap! r calc-r))

            (svg/circle
             :fill fg
             :cx (cell= (* spacing x))
             :cy (cell= (* spacing y))
             :r (cell= (high-pass (/ (* r y spacing) height)
                                  0.5)))))]

   [
    (style (str "circle { "
                "transition: all " (/ animation-speed 1000) "s " easing ";"
                " }"))


    (svg/svg
     :height height
     :width width
     :css {:background-color bg
           :filter "blur(0.5px)"}

     (for-tpl [[x y] (cell= (nd/position-seq rand-arr))]
      (circle x y)))])))

(html
  (head
    (link :href "app.css" :rel "stylesheet"))
  (body
   :css {:background-color bg}

   (pixi
    :height (/ (.-innerHeight js/window) 3)
    :width (.-innerWidth js/window)
    :spacing 10
    :bg bg
    :fg fg)))

    ; (div
    ;  :css {:position "fixed" :bottom 0
    ;        :background-color fg})))

     ; (vis
     ;  :height (/ (.-innerHeight js/window) 2.5)
     ;  :width (.-innerWidth js/window)
     ;  :spacing 10
     ;  :bg bg
     ;  :fg fg))))
