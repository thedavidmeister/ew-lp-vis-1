(page "index.html"
 (:require [el.landing-page-vis.dom]
           [hoplon.svg :as svg]
           [thi.ng.ndarray.core :as nd]
           [cljsjs.pixi]
           [cljsjs.tween]
           [tween.core]
           [thi.ng.color.core :as col]))

(def bg "#102769")
(def fg "#ff8140")

(def animation-speed 3000)

(def pareto-a (+ 0.1 (rand)))
(defn pareto
 ([] (pareto 1))
 ([xm] (pareto xm nil))
 ([xm a]
  (let [a (or a pareto-a)]
   (/ xm (.pow js/Math (rand) (/ 1 a))))))

(defn rand-size
 [n]
 (min n
      (pareto)))

(defn n
 [total per-item]
 (+ 2 (quot total per-item)))

(defn high-pass
 [v l]
 (if (<= v l)
     0
     v))

(defelem pixi
 [{:keys [height width spacing fg bg]} _]
 (let [pixi-colour (fn [c] @(col/as-int24 (col/css c)))
       bg (pixi-colour bg)
       fg (pixi-colour fg)
       n-rows (n width spacing)
       n-cols (n height spacing)
       nn (* n-rows n-cols)
       renderer (js/PIXI.autoDetectRenderer. width height (clj->js {:transparent true
                                                                    :antialias true
                                                                    :resolution 1}))
       stage (js/PIXI.Container.)
       pixi-circle (fn [g x y r]
                    (with-let [c (doto (js/PIXI.Graphics.)
                                       (.beginFill fg)
                                       (.drawCircle 0 0 r)
                                       (.endFill))]
                     (-> c .-position (.set x y))
                     (-> c .-cacheAsBitmap (set! true))
                     (.addChild g c)))

       ; pixi-circles (nd/ndarray :generic (repeatedly nn pixi-circle) [n-rows n-cols])
       rand-scale #(-> (pareto 1 0.75)
                       (/ 10)
                       (* spacing)
                       (min spacing)
                       (high-pass 1)
                       (/ 2))

       rand-grid #(nd/ndarray :float32 (repeatedly nn rand-scale) [n-rows n-cols])
       vs-a (cell (nd/ndarray :int8 (repeat nn 0) [n-rows n-cols]))
       vs-b (cell (rand-grid))
       next-vs! #(dosync (reset! vs-a @vs-b) (swap! vs-b rand-grid))
       vs (cell= (map (fn [a b] (+ a (* tween.core/p (- b a))))
                      vs-a
                      vs-b))
       i-x-y-r (cell= (map-indexed
                       (fn [i v] (let [[x y] (nd/index-pos vs-a i)] [i (* spacing x) (* spacing y) v]))
                       vs))

       cs (doall
           (for [[i x y r] @i-x-y-r]
            (pixi-circle stage x y 1)))]

  (cell=
   (dosync
    (doall
     (map (fn [[i x y r] c]
           (-> c .-scale (.set r r)))
          i-x-y-r
          cs))))

  (cell= (when (= 0 tween.core/p)
               (next-vs!)))

  (letfn [(frame [t]
           (.requestAnimationFrame js/window frame)
           (when @tween.core/dirty
            (.render renderer stage)
            (reset! tween.core/dirty false)))]
   (.requestAnimationFrame js/window frame))
  (.-view renderer)))

(html
  (head
    (link :href "app.css" :rel "stylesheet"))
  (body
   :css {:background-color bg}

   (div :css {:height "50vh" :background-color bg}
    (h1 "Estimate Work"
     :css {:color "white"
           :font-family "-apple-system"}))
   (pixi
    :height (/ (.-innerHeight js/window) 3)
    :width (.-innerWidth js/window)
    :spacing 10
    :bg bg
    :fg fg)
   (div :css {:height "100vh" :background-color fg})))
