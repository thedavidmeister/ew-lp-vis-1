(page "index.html"
 (:require [el.landing-page-vis.dom]
           [hoplon.svg :as svg]
           [thi.ng.ndarray.core :as nd]
           [cljsjs.pixi]
           [cljsjs.tween]
           [tween.core]
           [thi.ng.color.core :as col]))

(def bg "#102769")
(def fg "#ff8140")

(def animation-speed 3000)

(def pareto-a (+ 0.1 (rand)))
(defn pareto
 ([] (pareto 1))
 ([xm] (pareto xm nil))
 ([xm a]
  (let [a (or a pareto-a)]
   (/ xm (.pow js/Math (rand) (/ 1 a))))))

(defn rand-size
 [n]
 (min n
      (pareto)))

(defelem pixi
 [{:keys [height width spacing fg bg]} _]
 (let [; Converting CSS colours to something Pixi friendly.
       pixi-colour (fn [c] @(col/as-int24 (col/css c)))
       bg (pixi-colour bg)
       fg (pixi-colour fg)

       ; Init pixi.js
       renderer (js/PIXI.autoDetectRenderer.
                 width
                 height
                 (clj->js {:transparent true
                           :antialias true}))
       stage (js/PIXI.Container.)

       ; Build the grid.
       n (fn [total cell] (inc (quot total cell)))
       n-rows (n width spacing)
       n-cols (n height spacing)
       nn (* n-rows n-cols)
       high-pass (fn [v l] (if (<= v l) 0 v))
       rand-scale #(-> (pareto 1)
                       (/ 10)
                       ; Limit the scale to 1.
                       (min 1)
                       ; Apply a high pass to filter out the smallest dots. This
                       ; gives us more "true black" in the animation.
                       (high-pass (/ 2 spacing))
                       ; Convert diameter to radius.
                       (/ 2))
       rand-grid #(nd/ndarray :float32 (repeatedly nn rand-scale) [n-rows n-cols])
       vs-a (cell (nd/ndarray :int8 (repeat nn 0) [n-rows n-cols]))
       vs-b (cell (rand-grid))
       next-vs! #(dosync
                  (reset! vs-a @vs-b)
                  (swap! vs-b rand-grid))
       vs (cell= (map (fn [a b] (+ a (* tween.core/p (- b a))))
                      vs-a
                      vs-b))
       i-x-y-r (cell= (map-indexed
                       (fn [i v]
                        (let [[x y] (nd/index-pos vs-a i)]
                         [i
                          (* spacing x)
                          (- (+ (rem height spacing) (* spacing y))
                             (/ spacing 2))
                          v]))
                       vs))

       ; Render circles with pixi.
       pixi-circle (fn [g x y r]
                    (with-let [c (doto (js/PIXI.Graphics.)
                                       (.beginFill fg)
                                       (.drawCircle 0 0 r)
                                       (.endFill))]
                     (-> c .-position (.set x y))
                     (.addChild g c)))

       cs (for [[i x y r] @i-x-y-r]
           (pixi-circle stage x y spacing))]

  (cell=
   (doall
    (map (fn [[i x y r] c]
          (let [s (* r (/ y height))]
           (-> c .-scale (.set s s))))
         i-x-y-r
         cs)))

  (cell= (when (= 1 tween.core/p)
               (dosync
                (next-vs!)
                (tween.core/update-ts!))))

  (letfn [(frame [t]
           (.requestAnimationFrame js/window frame)
           (when @tween.core/dirty
            (.render renderer stage)
            (reset! tween.core/dirty false)))]
   (.requestAnimationFrame js/window frame))
  (.-view renderer)))

(html
  (head
    (link :href "app.css" :rel "stylesheet"))
  (body
   :css {:background-color bg}

   (div :css {:height "50vh" :background-color bg}
    (h1 "Estimate Work"
     :css {:color "white"
           :font-family "-apple-system"}))
   (pixi
    :height (/ (.-innerHeight js/window) 3)
    :width (.-innerWidth js/window)
    :spacing 15
    :bg bg
    :fg fg)
   (div :css {:height "100vh" :background-color fg})))
