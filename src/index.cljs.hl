(page "index.html"
 (:require [el.landing-page-vis.dom]
           [hoplon.svg :as svg]
           [thi.ng.ndarray.core :as nd]
           [cljsjs.pixi]
           [cljsjs.tween]
           [tween.core]
           [thi.ng.color.core :as col]))

(def bg "#102769")
(def fg "#ff8140")

(def animation-speed 3000)

(def pareto-a (+ 0.1 (rand)))
(defn pareto
 ([] (pareto 1))
 ([xm] (pareto xm nil))
 ([xm a]
  (let [a (or a pareto-a)]
   (/ xm (.pow js/Math (rand) (/ 1 a))))))

(defn rand-size
 [n]
 (min n
      (pareto)))

(defn n
 [total per-item]
 (+ 2 (quot total per-item)))

(defn high-pass
 [v l]
 (if (<= v l)
     0
     v))

(defelem pixi
 [{:keys [height width spacing fg bg]} _]
 (let [pixi-colour (fn [c] @(col/as-int24 (col/css c)))
       bg (pixi-colour bg)
       fg (pixi-colour fg)
       n-rows (n width spacing)
       n-cols (n height spacing)
       position-array (-> (nd/ndarray
                           :int8
                           (repeatedly
                            (* n-rows n-cols)
                            #(rand-size spacing))
                           [n-rows n-cols])
                          (nd/position-seq))
       renderer (js/PIXI.autoDetectRenderer. width height (clj->js {:transparent true
                                                                    :antialias true
                                                                    :resolution 1}))
       stage (js/PIXI.Container.)
       circle (fn [stage x-coord y-coord r-factor]
               (let [x-px (* x-coord spacing)
                     y-px (* y-coord spacing)
                     next-scale #(-> (pareto 1 0.75)
                                     ; Scale down based on typical vals from pareto to get
                                     ; closer to about 1.
                                     (/ 10)
                                     ; Scale up to match the grid spacing.
                                     (* spacing)
                                     ; Don't exceed the grid spacing.
                                     (min spacing)
                                     ; Apply the r-factor.
                                     (* r-factor)
                                     ; Hide anything too small.
                                     (high-pass 1)
                                     ; Convert diameter to radius.
                                     (/ 2))
                     tween= (tween.core/tween-cell {:from 0
                                                    :to (next-scale)
                                                    :duration animation-speed
                                                    :cb (fn [c] (reset! c (next-scale)))})]
                (with-let [c (doto (js/PIXI.Graphics.)
                                   (.beginFill fg)
                                   (.drawCircle 0 0 1)
                                   (.endFill))]

                 ; Use position of the graphics instead of x/y of the circle to
                 ; make scaling work as centered.
                 ; https://stackoverflow.com/questions/27807718/scale-to-a-specific-point-in-pixi-js
                 (-> c .-position (.set x-px y-px))

                 (cell= (-> c .-scale (.set tween= tween=)))

                 ; Append the circle to the main stage for rendering.
                 (.addChild stage c))))]

  (doseq [[x y] position-array]
   (circle stage x y (/ (* spacing y) height)))

  (letfn [(frame [t]
           (.requestAnimationFrame js/window frame)
           (.render renderer stage))]
   (.requestAnimationFrame js/window frame))
  (.-view renderer)))

(html
  (head
    (link :href "app.css" :rel "stylesheet"))
  (body
   :css {:background-color bg}

   (div :css {:height "50vh" :background-color bg}
    (h1 "Estimate Work"
     :css {:color "white"
           :font-family "-apple-system"}))
   (pixi
    :height (/ (.-innerHeight js/window) 3)
    :width (.-innerWidth js/window)
    :spacing 10
    :bg bg
    :fg fg)
   (div :css {:height "100vh" :background-color fg})))
